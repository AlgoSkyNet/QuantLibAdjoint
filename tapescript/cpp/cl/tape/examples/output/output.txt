Plus operation:

Input vector: { { 1, 2 }, { 0, 1 } }
Output vector: { { 1, 3 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 2, 5 }, { 1, -1 } }...
Forward sweep result: { { 3, 4 } }

Reverse(1, w) sweep for w = { { 3, 7 } }...

Op#  Res# Op       Operands#          Taylor coefficients
3    3    +        vl=1     vr=2      fz[0] = { 1, 3 }             rz[0] = { 3, 7 }            
2    2    Init                        fz[0] = { 0, 1 }             rz[0] = { 3, 7 }            
1    1    Init                        fz[0] = { 1, 2 }             rz[0] = { 3, 7 }            
0         Begin                      

Reverse sweep result: { { 3, 7 }, { 3, 7 } }


Minus operation:

Input vector: { { 1, 2 }, { 0, 1 } }
Output vector: { { 1, 1 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 2, 5 }, { 1, -1 } }...
Forward sweep result: { { 1, 6 } }

Reverse(1, w) sweep for w = { { 3, 7 } }...

Op#  Res# Op       Operands#          Taylor coefficients
3    3    -        vl=1     vr=2      fz[0] = { 1, 1 }             rz[0] = { 3, 7 }            
2    2    Init                        fz[0] = { 0, 1 }             rz[0] = { -3, -7 }          
1    1    Init                        fz[0] = { 1, 2 }             rz[0] = { 3, 7 }            
0         Begin                      

Reverse sweep result: { { 3, 7 }, { -3, -7 } }


Exponent function:

Input vector: { { 0, 1 } }
Output vector: { { 1, 2.72 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 2, -1 } }...
Forward sweep result: { { 2, -2.72 } }

Reverse(1, w) sweep for w = { { 1, -1 } }...

Op#  Res# Op       Operands#          Taylor coefficients
2    2    exp       v=1               fz[0] = { 1, 2.72 }          rz[0] = { 1, -1 }           
1    1    Init                        fz[0] = { 0, 1 }             rz[0] = { 1, -2.72 }        
0         Begin                      

Reverse sweep result: { { 1, -2.72 } }


Cosine function:

Input vector: { { 1, 1.57 } }
Output vector: { { 0.54, -1.03e-013 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 1, 1 } }...
Forward sweep result: { { -0.841, -1 } }

Reverse(1, w) sweep for w = { { -2, 1 } }...

Op#  Res# Op       Operands#          Taylor coefficients
2    3    cos       v=1               fz[0] = { 0.54, -1.03e-013 } rz[0] = { -2, 1 }           
1    1    Init                        fz[0] = { 1, 1.57 }          rz[0] = { 1.68, -1 }        
0         Begin                      

Reverse sweep result: { { 1.68, -1 } }


Discount calculations:

Spot: { 100, 110 }
Rate: { 0.05, 0.04 }
Time: { 1, 2 }
Input vector: { { 100, 110 }, { 0.05, 0.04 }, { 1, 2 } }
Discounted price: { 95.1, 102 }
Discount factor: { 0.951, 0.923 }
Output vector: { { 95.1, 102 }, { 0.951, 0.923 } }

Initial Forward(0) sweep...

Calculation of sensitivity to 1% change in interest rate.
Forward(1, dx) sweep for dx = { 0, 0.01, 0 }...
Forward sweep result: { { -0.951, -2.03 }, { -0.00951, -0.0185 } }
Sensitivity of discounted price: { -0.951, -2.03 }
Sensitivity of discount factor:  { -0.00951, -0.0185 }

Calculation of sensitivity of discount factor.
Reverse(1, w) sweep for w = { 0, 1 }...

Op#  Res# Op       Operands#          Taylor coefficients
7    7    *        vl=1     vr=6      fz[0] = { 95.1, 102 }        rz[0] = 0                   
6    6    exp       v=5               fz[0] = { 0.951, 0.923 }     rz[0] = 1                   
5    5    *        vl=4     vr=3      fz[0] = { -0.05, -0.08 }     rz[0] = { 0.951, 0.923 }    
4    4    -        pl=0     vr=2      fz[0] = { -0.05, -0.04 }     rz[0] = { 0.951, 1.85 }     
3    3    Init                        fz[0] = { 1, 2 }             rz[0] = { -0.0476, -0.0369 }
2    2    Init                        fz[0] = { 0.05, 0.04 }       rz[0] = { -0.951, -1.85 }   
1    1    Init                        fz[0] = { 100, 110 }         rz[0] = 0                   
0         Begin                      

Reverse sweep result: { 0, { -0.951, -1.85 }, { -0.0476, -0.0369 } }
Sensitivity to the changes in spot price:    0
Sensitivity to the changes in interest rate: { -0.951, -1.85 }
Sensitivity to the changes in maturity time: { -0.0476, -0.0369 }


We are mixing arrays and scalars in calculations of
Y = { sin(x0) / cos(x1) + x1 / x0, y0 + x0 * (x0 + x1)^3 - 0.5 } function:

Input vector: { { 1, 2 }, -1 }
Output vector: { { 0.557, 1.18 }, { 0.0574, 2.68 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 1, -1 }, 2 }...
Forward sweep result: { { -0.851, -3.72 }, { -0.851, 1.28 } }

Reverse(1, w) sweep for w = { { -2, 1 }, { 2, 3 } }...

Op#  Res# Op       Operands#          Taylor coefficients
13   15   -        vl=14    pr=0.5    fz[0] = { 0.0574, 2.68 }     rz[0] = { 2, 3 }            
12   14   +        vl=9     vr=13     fz[0] = { 0.557, 3.18 }      rz[0] = { 2, 3 }            
11   13   *        vl=1     vr=12     fz[0] = { 0, 2 }             rz[0] = { 2, 3 }            
10   12   *        vl=10    vr=11     fz[0] = { 0, 1 }             rz[0] = { 2, 6 }            
9    11   *        vl=10    vr=10     fz[0] = { 0, 1 }             rz[0] = { 0, 6 }            
8    10   +        vl=1     vr=2      fz[0] = { 0, 1 }             rz[0] = { 0, 18 }           
7    9    +        vl=8     vr=3      fz[0] = { 0.557, 1.18 }      rz[0] = { 0, 4 }            
6    8    /        vl=7     vr=5      fz[0] = { 1.56, 1.68 }       rz[0] = { 0, 4 }            
5    7    sin       v=1               fz[0] = { 0.841, 0.909 }     rz[0] = { 0, 7.4 }          
4    5    cos       v=2               fz[0] = 0.54                 rz[0] = -12.5               
3    3    /        vl=2     vr=1      fz[0] = { -1, -0.5 }         rz[0] = { 0, 4 }            
2    2    Init                        fz[0] = -1                   rz[0] = 9.52                
1    1    Init                        fz[0] = { 1, 2 }             rz[0] = { 0, 18.9 }         
0         Begin                      

Reverse sweep result: { { 0, 18.9 }, 9.52 }


Sum of an array:

Input vector: { { 1, 2 } }
Output vector: { 3 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 1.5, -1 } }...
Forward sweep result: { 0.5 }

Reverse(1, w) sweep for w = { 4 }...

Op#  Res# Op       Operands#          Taylor coefficients
5         User     Sum                                                          
4    2    Usrrv                       fz[0] = 3                    rz[0] = 4                   
3         Usrav     v=1              
2         User     Sum                                                          
1    1    Init                        fz[0] = { 1, 2 }             rz[0] = 4                   
0         Begin                      

Reverse sweep result: { 4 }


Reversing of an array:

Input vector: { { 1, 2 } }
Output vector: { { 2, 1 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 1.5, -1 } }...
Forward sweep result: { { -1, 1.5 } }

Reverse(1, w) sweep for w = { 4 }...

Op#  Res# Op       Operands#          Taylor coefficients
5         User     Reversing                                                    
4    2    Usrrv                       fz[0] = { 2, 1 }             rz[0] = 4                   
3         Usrav     v=1              
2         User     Reversing                                                    
1    1    Init                        fz[0] = { 1, 2 }             rz[0] = 4                   
0         Begin                      

Reverse sweep result: { 4 }


Array concatenation:

Input vector: { { 1, 2 }, 7, { 0, 5 } }
Output vector: { { 1, 2, 7, 0, 5 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 2, 5 }, 12, { 1, -1 } }...
Forward sweep result: { { 2, 5, 12, 1, -1 } }

Reverse(1, w) sweep for w = { { 1, 2, 3, 4, 5 } }...

Op#  Res# Op       Operands#          Taylor coefficients
13        User     Concatenation                                                
12   5    Usrrv                       fz[0] = { 1, 2, 7, 0, 5 }    rz[0] = { 1, 2, 3, 4, 5 }   
11        Usrav     v=3              
10        Usrav     v=4              
9         User     Concatenation                                                
8         User     Concatenation                                                
7    4    Usrrv                       fz[0] = { 1, 2, 7 }          rz[0] = { 1, 2, 3 }         
6         Usrav     v=2              
5         Usrav     v=1              
4         User     Concatenation                                                
3    3    Init                        fz[0] = { 0, 5 }             rz[0] = { 4, 5 }            
2    2    Init                        fz[0] = 7                    rz[0] = 3                   
1    1    Init                        fz[0] = { 1, 2 }             rz[0] = { 1, 2 }            
0         Begin                      

Reverse sweep result: { { 1, 2 }, 3, { 4, 5 } }


Array construction from scalar:

Input vector: { 7 }
Output vector: { { 7, 7 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1 }...
Forward sweep result: { { 1, 1 } }

Reverse(1, w) sweep for w = { { 1, 2 } }...

Op#  Res# Op       Operands#          Taylor coefficients
6         User     Construction(val, n)                                         
5    2    Usrrv                       fz[0] = { 7, 7 }             rz[0] = { 1, 2 }            
4         Usrap     p=2              
3         Usrav     v=1              
2         User     Construction(val, n)                                         
1    1    Init                        fz[0] = 7                    rz[0] = 3                   
0         Begin                      

Reverse sweep result: { 3 }


Maximum of two arrays:

Input vector: { { -1, 0, 1 }, { 1, 0, -1 } }
Output vector: { { 1, 0, 1 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 1, 1, 1 }, { 2, 2, 2 } }...
Forward sweep result: { { 2, 2, 1 } }

Reverse(1, w) sweep for w = { { 1, 2, 3 } }...

Op#  Res# Op       Operands#          Taylor coefficients
3    3    > ? :    vl=1     vr=2     vt=1     vf=2     fz[0] = { 1, 0, 1 }          rz[0] = { 1, 2, 3 }         
2    2    Init                        fz[0] = { 1, 0, -1 }         rz[0] = { 1, 2, 0 }         
1    1    Init                        fz[0] = { -1, 0, 1 }         rz[0] = { 0, 0, 3 }         
0         Begin                      

Reverse sweep result: { { 0, 0, 3 }, { 1, 2, 0 } }


L2 norm of an array:

Input vector: { 3 }
Output vector: { 4.24 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1 }...
Forward sweep result: { 1.41 }

Reverse(1, w) sweep for w = { 1 }...

Op#  Res# Op       Operands#          Taylor coefficients
12   5    sqrt      v=4               fz[0] = 4.24                 rz[0] = 1                   
11        User     Sum                                                          
10   4    Usrrv                       fz[0] = 18                   rz[0] = 0.118               
9         Usrav     v=3              
8         User     Sum                                                          
7    3    *        vl=2     vr=2      fz[0] = { 9, 9 }             rz[0] = 0.118               
6         User     Construction(val, n)                                         
5    2    Usrrv                       fz[0] = { 3, 3 }             rz[0] = { 0.707, 0.707 }    
4         Usrap     p=2              
3         Usrav     v=1              
2         User     Construction(val, n)                                         
1    1    Init                        fz[0] = 3                    rz[0] = 1.41                
0         Begin                      

Reverse sweep result: { 1.41 }


Linear regression:

Input vector: { { -1, 0, 1 }, { 1, 0, 3 } }
Output vector: { 1.33, 1, { 0.333, 1.33, 2.33 } }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { { 1, 0, 0 }, { 0, 0, 0 } }...
Forward sweep result: { -0.333, 0.833, { -0.167, -0.333, 0.5 } }

Reverse(1, w) sweep for w = { 0, 1, 0 }...

Op#  Res# Op       Operands#          Taylor coefficients
29   17   +        vl=15    vr=16     fz[0] = { 0.333, 1.33, 2.33 } rz[0] = 0                   
28   16   *        vl=13    vr=1      fz[0] = { -1, 0, 1 }         rz[0] = 0                   
27   15   -        vl=6     vr=14     fz[0] = 1.33                 rz[0] = 0                   
26   14   *        vl=13    vr=4      fz[0] = 0                    rz[0] = 0                   
25   13   /        vl=12    vr=10     fz[0] = 1                    rz[0] = 1                   
24        User     Sum                                                          
23   12   Usrrv                       fz[0] = 2                    rz[0] = 0.5                 
22        Usrav     v=11             
21        User     Sum                                                          
20   11   *        vl=7     vr=8      fz[0] = { 0.333, -0, 1.67 }  rz[0] = 0.5                 
19        User     Sum                                                          
18   10   Usrrv                       fz[0] = 2                    rz[0] = -0.5                
17        Usrav     v=9              
16        User     Sum                                                          
15   9    *        vl=7     vr=7      fz[0] = { 1, 0, 1 }          rz[0] = -0.5                
14   8    -        vl=2     vr=6      fz[0] = { -0.333, -1.33, 1.67 } rz[0] = { -0.5, 0, 0.5 }    
13   7    -        vl=1     vr=4      fz[0] = { -1, 0, 1 }         rz[0] = { 0.833, -0.667, -0.167 }
12   6    *        pl=0.33* vr=5      fz[0] = 1.33                 rz[0] = 0                   
11        User     Sum                                                          
10   5    Usrrv                       fz[0] = 4                    rz[0] = 0                   
9         Usrav     v=2              
8         User     Sum                                                          
7    4    *        pl=0.33* vr=3      fz[0] = 0                    rz[0] = -1.11e-016          
6         User     Sum                                                          
5    3    Usrrv                       fz[0] = 0                    rz[0] = -3.7e-017           
4         Usrav     v=1              
3         User     Sum                                                          
2    2    Init                        fz[0] = { 1, 0, 3 }          rz[0] = { -0.5, 0, 0.5 }    
1    1    Init                        fz[0] = { -1, 0, 1 }         rz[0] = { 0.833, -0.667, -0.167 }
0         Begin                      

Reverse sweep result: { { 0.833, -0.667, -0.167 }, { -0.5, 0, 0.5 } }


