Plus operation:

Input vector: { 1, 2, 0, 1 }
Output vector: { 1, 3 }

Forward(1, dx) sweep for dx = { 2, 5, 1, -1 }...
Forward sweep result: { 3, 4 }

Reverse(1, w) sweep for w = { 3, 7 }...
Reverse sweep result: { 3, 7, 3, 7 }


Minus operation:

Input vector: { 1, 2, 0, 1 }
Output vector: { 1, 1 }

Forward(1, dx) sweep for dx = { 2, 5, 1, -1 }...
Forward sweep result: { 1, 6 }

Reverse(1, w) sweep for w = { 3, 7 }...
Reverse sweep result: { 3, 7, -3, -7 }


Exponent function:

Input vector: { 0, 1 }
Output vector: { 1, 2.72 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 2, -1 }...
Forward sweep result: { 2, -2.72 }

Reverse(1, w) sweep for w = { 1, -1 }...
Reverse sweep result: { 1, -2.72 }


Cosine function:

Input vector: { 1, 1.57 }
Output vector: { 0.54, -1.03e-013 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1, 1 }...
Forward sweep result: { -0.841, -1 }

Reverse(1, w) sweep for w = { -2, 1 }...
Reverse sweep result: { 1.68, -1 }


Discount calculations:

Spot: { 100, 110 }
Rate: { 0.05, 0.04 }
Time: { 1, 2 }
Input vector: { 100, 110, 0.05, 0.04, 1, 2 }
Discounted price: { 95.1, 102 }
Discount factor: { 0.951, 0.923 }
Output vector: { 95.1, 102, 0.951, 0.923 }

Initial Forward(0) sweep...

Calculation of sensitivity to 1% change in interest rate.
Forward(1, dx) sweep for dx = { 0, 0, 0.01, 0.01, 0, 0 }...
Forward sweep result: { -0.951, -2.03, -0.00951, -0.0185 }
Sensitivity of discounted price: -0.951 , -2.03
Sensitivity of discount factor:  -0.00951 , -0.0185

Calculation of sensitivity of discount factor.
Reverse(1, w) sweep for w = { 0, 0, 1, 1 }...
Reverse sweep result: { 0, 0, -0.951, -1.85, -0.0476, -0.0369 }
Sensitivity to the changes in spot price:    0 , 0
Sensitivity to the changes in interest rate: -0.951 , -1.85
Sensitivity to the changes in maturity time: -0.0476 , -0.0369


We are mixing arrays and scalars in calculations of
Y = { sin(x0) / cos(x1) + x1 / x0, y0 + x0 * x1^3 - 0.5 } function:

Input vector: { 1, 2, -1.2 }
Output vector: { 1.12, 1.91, -1.11, -2.05 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1, -1, 2 }...
Forward sweep result: { -7.26, -11.1, -0.343, 7.95 }

Reverse(1, w) sweep for w = { -2, 1, 2, 3 }...
Reverse sweep result: { -3.46, -8.58, 10.7 }


Sum of an array:

Input vector: { 1, 2 }
Output vector: { 3 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1.5, -1 }...
Forward sweep result: { 0.5 }

Reverse(1, w) sweep for w = { 4 }...
Reverse sweep result: { 4, 4 }


Reversing of an array:

Input vector: { 1, 2 }
Output vector: { 2, 1 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1.5, -1 }...
Forward sweep result: { -1, 1.5 }

Reverse(1, w) sweep for w = { 4, 4 }...
Reverse sweep result: { 4, 4 }


Array concatenation:

Input vector: { 1, 2, 7, 0, 5 }
Output vector: { 1, 2, 7, 0, 5 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 2, 5, 12, 1, -1 }...
Forward sweep result: { 2, 5, 12, 1, -1 }

Reverse(1, w) sweep for w = { 1, 2, 3, 4, 5 }...
Reverse sweep result: { 1, 2, 3, 4, 5 }


Array construction from scalar:

Input vector: { 7 }
Output vector: { 7, 7 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1 }...
Forward sweep result: { 1, 1 }

Reverse(1, w) sweep for w = { 1, 2 }...
Reverse sweep result: { 3 }


Maximum of two arrays:

Input vector: { -1, 0, 1, 1, 0, -1 }
Output vector: { 1, 0, 1 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1, 1, 1, 2, 2, 2 }...
Forward sweep result: { 2, 2, 1 }

Reverse(1, w) sweep for w = { 1, 2, 3 }...
Reverse sweep result: { 0, 0, 3, 1, 2, 0 }


L2 norm of an array:

Input vector: { 3 }
Output vector: { 4.24 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 1 }...
Forward sweep result: { 1.41 }

Reverse(1, w) sweep for w = { 1 }...
Reverse sweep result: { 1.41 }


Linear regression:

Input vector: { -1, 0, 1, 1, 0, 3 }
Output vector: { 1.33, 1, 0.333, 1.33, 2.33 }

Initial Forward(0) sweep...

Forward(1, dx) sweep for dx = { 0, 0, 0, 0, 0, 1 }...
Forward sweep result: { 0.333, 0.5, -0.167, 0.333, 0.833 }

